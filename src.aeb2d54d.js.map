{"version":3,"sources":["fetchCountries.js","../node_modules/debounce/index.js","index.js"],"names":["fetchCountries","countryName","fetch","then","resault","json","debounce","require","DEBOUNCE_DELAY","refs","input","document","querySelector","list","descr","onSearchCountry","e","target","value","data","console","log","addEventListener"],"mappings":";;;AAGC,aAHM,SAASA,EAAeC,GAEtBC,OAAAA,6CADqDD,KACjCE,KAAKC,GAAWA,EAAQC,QACpD,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,eAAA;;ACWD,SAAA,EAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,EAAA,EAAA,EAGA,SAAA,IACA,IAAA,EAAA,KAAA,MAAA,EAEA,EAAA,GAAA,GAAA,EACA,EAAA,WAAA,EAAA,EAAA,IAEA,EAAA,KACA,IACA,EAAA,EAAA,MAAA,EAAA,GACA,EAAA,EAAA,OAXA,MAAA,IAAA,EAAA,KAgBA,IAAA,EAAA,WACA,EAAA,KACA,EAAA,UACA,EAAA,KAAA,MACA,IAAA,EAAA,IAAA,EAOA,OANA,IAAA,EAAA,WAAA,EAAA,IACA,IACA,EAAA,EAAA,MAAA,EAAA,GACA,EAAA,EAAA,MAGA,GAoBA,OAjBA,EAAA,MAAA,WACA,IACA,aAAA,GACA,EAAA,OAIA,EAAA,MAAA,WACA,IACA,EAAA,EAAA,MAAA,EAAA,GACA,EAAA,EAAA,KAEA,aAAA,GACA,EAAA,OAIA,EAIA,EAAA,SAAA,EAEA,OAAA,QAAA;;ACpDC,aAjBD,QAAA,oBACA,IAAA,EAAA,QAAA,uBACIC,EAAWC,QAAQ,YAEvB,MAAMC,EAAiB,IAEjBC,EAAO,CACXC,MAAOC,SAASC,cAAc,eAC9BC,KAAMF,SAASC,cAAc,iBAC7BE,MAAOH,SAASC,cAAc,kBAKhC,SAASG,EAAgBC,GACjBf,MAAAA,EAAce,EAAEC,OAAOC,OACdjB,EAAAA,EAAAA,gBAAAA,GAAaE,KAAKgB,GAAQC,QAAQC,IAAIF,IAJvDV,EAAKC,MAAMY,iBAAiB,QAAShB,EAASS,EARvB","file":"src.aeb2d54d.js","sourceRoot":"../src","sourcesContent":["export function fetchCountries(countryName) {\n  const urlForSearch = `https://restcountries.com/v3.1/name/${countryName}`;\n  return fetch(urlForSearch).then(resault => resault.json());\n}\n","/**\n * Returns a function, that, as long as it continues to be invoked, will not\n * be triggered. The function will be called after it stops being called for\n * N milliseconds. If `immediate` is passed, trigger the function on the\n * leading edge, instead of the trailing. The function also has a property 'clear' \n * that is a function which will clear the timer to prevent previously scheduled executions. \n *\n * @source underscore.js\n * @see http://unscriptable.com/2009/03/20/debouncing-javascript-methods/\n * @param {Function} function to wrap\n * @param {Number} timeout in ms (`100`)\n * @param {Boolean} whether to execute at the beginning (`false`)\n * @api public\n */\nfunction debounce(func, wait, immediate){\n  var timeout, args, context, timestamp, result;\n  if (null == wait) wait = 100;\n\n  function later() {\n    var last = Date.now() - timestamp;\n\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n      if (!immediate) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n    }\n  };\n\n  var debounced = function(){\n    context = this;\n    args = arguments;\n    timestamp = Date.now();\n    var callNow = immediate && !timeout;\n    if (!timeout) timeout = setTimeout(later, wait);\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n\n    return result;\n  };\n\n  debounced.clear = function() {\n    if (timeout) {\n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n  \n  debounced.flush = function() {\n    if (timeout) {\n      result = func.apply(context, args);\n      context = args = null;\n      \n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n\n  return debounced;\n};\n\n// Adds compatibility for ES modules\ndebounce.debounce = debounce;\n\nmodule.exports = debounce;\n","import './css/styles.css';\nimport { fetchCountries } from './fetchCountries.js';\nvar debounce = require('debounce');\n\nconst DEBOUNCE_DELAY = 300;\n\nconst refs = {\n  input: document.querySelector('#search-box'),\n  list: document.querySelector('.country-list'),\n  descr: document.querySelector('.country-info'),\n};\n\nrefs.input.addEventListener('input', debounce(onSearchCountry, DEBOUNCE_DELAY));\n\nfunction onSearchCountry(e) {\n  const countryName = e.target.value;\n  fetchCountries(countryName).then(data => console.log(data));\n}\n"]}